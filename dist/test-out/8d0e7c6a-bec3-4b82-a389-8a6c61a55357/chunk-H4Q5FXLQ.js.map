{
  "version": 3,
  "sources": ["__mocks__/customers.ts", "src/app/consts/max-length.ts", "src/app/core/models/customer.ts", "src/app/core/models/orgEntity.ts", "src/app/features/customer/customer/customer.ts"],
  "sourcesContent": ["const customers = [\r\n    { name: 'BMP', description: 'BMP', id: '1' }\r\n];\r\n\r\nconst OES = [\r\n    { name: 'GERMANY', code: 'DE', debtor: '1111' }\r\n]\r\n\r\nconst applications = [\r\n    { name: 'BPM_SFMS_TEST', description: 'BPM test application', id: '1' }\r\n]\r\n\r\nexport function getCustomers(): any[] {\r\n    return customers;\r\n}\r\n\r\nexport function getOes() {\r\n    return [...OES];\r\n}\r\n\r\nexport function getApplications() {\r\n    return applications;\r\n}\r\n\r\n\r\n", "export enum ApplicationMaxLength {\r\n    name = 60,\r\n    description = 120,\r\n}\r\n\r\nexport enum ApplicationFlowMaxLength {\r\n    flowCode = 60,\r\n    description = 120\r\n}\r\n\r\nexport enum BillingAccountMaxLength {\r\n    name = 60,\r\n    billingManagerEmail = 60,\r\n    technicalManagerEmail = 60,\r\n}\r\n\r\nexport enum ConfigurationMaxLength {\r\n    configKey = 60,\r\n    configValue = 256\r\n}\r\n\r\nexport enum ConsumerMaxLength {\r\n    consumerKey = 60,\r\n    oidcInstrospectUri = 256,\r\n    oidcProvider = 50,\r\n    complianceRegion = 60\r\n}\r\n\r\n//scan sync \r\n// scan async \r\n// scan and download", "import { ConsumerMaxLength } from \"../../consts/max-length\";\r\nimport { CUSTOMER_TYPE } from \"../interfaces/customer-type\";\r\n\r\nexport class CustomerDetails {\r\n    private _name!: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(value: string) {\r\n        if (value.length > ConsumerMaxLength.consumerKey) {\r\n            throw new Error(`Customer Name cannot exceed ${ConsumerMaxLength.consumerKey} characters.`);\r\n        }\r\n        this._name = value;\r\n    }\r\n\r\n    private _description!: string;\r\n    get description(): string {\r\n        return this._description;\r\n    }\r\n    set description(value: string) {\r\n        if (value.length > ConsumerMaxLength.consumerKey) {\r\n            throw new Error(`Customer Detail cannot exceed ${ConsumerMaxLength.consumerKey} characters.`);\r\n        }\r\n        this._description = value;\r\n    }\r\n\r\n    type: CUSTOMER_TYPE | undefined;\r\n    constructor() {\r\n\r\n    }\r\n}", "import { ConsumerMaxLength } from \"../../consts/max-length\";\r\n\r\nexport class OrgEntity {\r\n    private _name!: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(value: string) {\r\n        if (value.length > ConsumerMaxLength.consumerKey) {\r\n            throw new Error(`ORG ENTITY Name cannot exceed ${ConsumerMaxLength.consumerKey} characters.`);\r\n        }\r\n        this._name = value;\r\n    }\r\n\r\n    private _code!: string;\r\n    get code(): string {\r\n        return this._code;\r\n    }\r\n    set code(value: string) {\r\n        if (value.length > ConsumerMaxLength.consumerKey) {\r\n            throw new Error(`ORG ENTITY Detail cannot exceed ${ConsumerMaxLength.consumerKey} characters.`);\r\n        }\r\n        this._code = value;\r\n    }\r\n\r\n    private _debtor!: string;\r\n    get debtor(): string {\r\n        return this._debtor;\r\n    }\r\n    set debtor(value: string) {\r\n        if (value.length > ConsumerMaxLength.consumerKey) {\r\n            throw new Error(`ORG ENTITY Detail cannot exceed ${ConsumerMaxLength.consumerKey} characters.`);\r\n        }\r\n        this._debtor = value;\r\n    }\r\n}", "import { Injectable } from '@angular/core';\r\nimport { getCustomers, getOes, getApplications } from \"../../../../../__mocks__/customers\"\r\nimport { CustomerDetails } from '../../../core/models/customer';\r\nimport { OrgEntity } from '../../../core/models/orgEntity';\r\nimport { CUSTOMER_TYPE } from '../../../core/interfaces/customer-type';\r\nimport { OrgEntityI } from '../../../core/interfaces/orgEntity';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Customer {\r\n  customerDetails = new CustomerDetails();\r\n  orgEntity = new OrgEntity();\r\n  private customers = getCustomers();\r\n  private orgEntities = getOes();\r\n  private applications = getApplications();\r\n\r\n  setCustomerData(name: string, description: string, type: CUSTOMER_TYPE) {\r\n    this.customerDetails.name = name;\r\n    this.customerDetails.description = description;\r\n    this.customerDetails.type = type;\r\n  }\r\n\r\n  createCustomer() {\r\n    const { name, description, type } = this.customerDetails;\r\n    this.customers.push({ name, description, type })\r\n  }\r\n\r\n  setOrgName(name: string) {\r\n    this.orgEntity.name = name;\r\n  }\r\n  setOrgCode(code: string) {\r\n    this.orgEntity.code = code;\r\n  }\r\n\r\n  setOrgDebtor(debtor: string) {\r\n    this.orgEntity.debtor = debtor;\r\n  }\r\n\r\n\r\n  getAllCustomers() {\r\n    return [...this.customers];\r\n  }\r\n\r\n  getAllOe(): OrgEntityI[] {\r\n    return [...this.orgEntities];\r\n  }\r\n\r\n  getAllApplications() {\r\n    return [...this.applications];\r\n  }\r\n\r\n\r\n  createOe() {\r\n    this.orgEntities.push(this.orgEntity);\r\n  }\r\n  \r\n}\r\n"],
  "mappings": "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",
  "names": ["ApplicationMaxLength", "ApplicationFlowMaxLength", "BillingAccountMaxLength", "ConfigurationMaxLength", "ConsumerMaxLength", "Customer"]
}
